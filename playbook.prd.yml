- name: Security Baseline Application
  hosts: all
  become: yes
  vars: 
        changeLine:
                - name: 'ID-01'
                  path: '/etc/gshadow' 
                  toReplace:
                          - search: 'daemon::|daemon:!:'
                            line: 'daemon:*:'
                          - search: 'bin::|bin:!:'
                            line: 'bin:*:'

        newLine:
                - name: 'ID-02'
                  path: '/etc/ssh/banner'
                  create: true
                  lines:
                          - '**********************************************************'
                          - '*                    Â¡COMUNICADO!                        *'
                          - '*             USO PARA TRABAJOS PROFESIONALES            *'
                          - '**********************************************************'

        packages:
                #action => absent -> remove ; present -> install; latest -> update
                - name: 'ID-03'
                  type: 'yum'
                  action: present
                  package: 'httpd'

                - name: 'ID-04'
                  type: 'dnf'
                  action: present
                  package: 'nodejs'

        exeShell:
                - name: 'ID-05'
                  command: 'systemctl stop firewalld && systemctl disable firewalld'

                - name: 'ID-06'
                  command: 'systemctl enable auditd && systemctl start auditd'

        secuence:
                - name: 'ID-07'
                  commands:
                          - 'yum install -y package1'
                          - 'echo "parameter_01 value_01" >> /etc/x/package.conf'
                          - 'echo "parameter_02 value_02" >> /etc/x/package.conf'
                          - 'systemctl enable package1'
                          - 'systemctl start package1' 
  tasks: 

        #Var ChangeLine
        - name: Make Change on the Same Line
          replace:
                  path: '{{item.0.path}}'
                  regexp: '{{item.1.search}}'
                  replace: '{{item.1.line}}'
                  backup: false

          ignore_unreachable: false
          ignore_errors: true
          register: var_changeLines
          with_subelements:
                  - "{{changeLine}}"
                  - toReplace
               

        #Var newLine
        - name: Add a new Line in the File
          blockinfile:
                  marker: "## {mark} ANX-MIB-743 >> {{item.name}} "
                  path: '{{item.path}}'
                  create: '{{item.create}}'
                  block: |
                          {% for line in item.lines %}
                          {{ line}}
                          {% endfor %}

                  backup: false

          ignore_unreachable: false
          ignore_errors: true
          register: var_newLines
          loop: "{{newLine}}"

        #Var packages
        - name: Using packages module yum / install / remove
          yum: 
                name: '{{item.package}}'
                state: '{{item.action}}'

          register: var_yum_packages
          loop: "{{packages}}"
          when: item.type == "yum"

        - name: Using packages module dnf / install / remove
          yum: 
                name: '{{item.package}}'
                state: '{{item.action}}'

          register: var_dnf_packages
          loop: "{{packages}}"
          when: item.type == "dnf"
       
        #Var exeShell
        - name: Using shell to execute commands / not sequence
          shell:
               "{{item.command}}"
          ignore_unreachable: false
          ignore_errors: true
          register: var_exeShells
          loop: "{{exeShell}}"

        #Var secuence
        - name: Using shell to execute commands / in sequence
          shell:
               "{{item.1}}"
          ignore_unreachable: false
          ignore_errors: true
          register: var_secuences
          with_subelements:
                  - "{{secuence}}"
                  - commands

        - name: Show var_newLine
          debug:
                  var: var_newLines

        - name: Show var_changeLines
          debug:
                  var: var_changeLines

        - name: Show var_secuences
          debug:
                  var: var_secuences
  
        - name: Show var_exeShells
          debug:
                  var: var_exeShells

        - name: Show var_packages_yum
          debug:
                  var: var_yum_packages

        - name: Show var_packages_dnf
          debug:
                  var: var_dnf_packages


- name: Generate Report
  hosts: localhost
  become: true
  tasks:
          - name: General Report
            copy:
                    dest: './file_status_lbs_report.csv'
                    content: |
                            Host, S.O, Type Action, Action Code, Path, Search Regexp, Line, Commands, Changed, Failed, msg 
                            {% for host in groups.all %}
                            {% if hostvars[host].var_newLines is defined %}
                            {% with var_newLines=hostvars[host].var_newLines , host_data=hostvars[host] %} 
                            {%- for result in var_newLines.results %}
                            {{ host }}, {{host_data.ansible_distribution}} {{host_data.ansible_distribution_version}}, New lines, {{result.item.name}}, {{result.item.path}}, , , , {{result.changed}}, {{result.failed}}, {{result.msg}}
                            {% endfor %}                 
                            {% endwith %}
                            {% endif %}
                            {% if hostvars[host].var_changeLines is defined %}
                            {% with var_changeLines=hostvars[host].var_changeLines , host_data=hostvars[host] %} 
                            {%- for result in var_changeLines.results %}
                            {{ host }}, {{host_data.ansible_distribution}} {{host_data.ansible_distribution_version}}, Change Lines, {{result.item[0].name}}, {{result.item[0].path}}, {{result.item[1].search}}, {{result.item[1].line}}, , {{result.changed}}, {{result.failed}}, {{result.msg}}
                            {% endfor %}
                            {% endwith %}
                            {% endif %}
                            {% if hostvars[host].var_yum_packages is defined %}
                            {% with var_packages=hostvars[host].var_yum_packages , host_data=hostvars[host] %} 
                            {%- for result in var_packages.results %}
                            {% if result.skipped is not defined %}
                            {{ host }}, {{host_data.ansible_distribution}} {{host_data.ansible_distribution_version}}, {{result.item.type}} Packages, {{result.item.name}}, , , , {{result.item.type}}/{{result.item.action}}/{{result.item.package}}, {{result.changed}}, {{result.failed}}, {{result.results | join(';') }}
                            {% endif %}
                            {% endfor %}
                            {% endwith %}
                            {% endif %}
                            {% if hostvars[host].var_dnf_packages is defined %}
                            {% with var_packages=hostvars[host].var_dnf_packages , host_data=hostvars[host] %} 
                            {%- for result in var_packages.results %}
                            {% if result.skipped is not defined %}
                            {{ host }}, {{host_data.ansible_distribution}} {{host_data.ansible_distribution_version}}, {{result.item.type}} Packages, {{result.item.name}}, , , , {{result.item.type}}/{{result.item.action}}/{{result.item.package}}, {{result.changed}}, {{result.failed}}, {{result.results | join(';') }}
                            {% endif %}
                            {% endfor %}
                            {% endwith %}
                            {% endif %}
                            {% if hostvars[host].var_exeShells is defined %}
                            {% with var_exeShells=hostvars[host].var_exeShells , host_data=hostvars[host] %} 
                            {%- for result in var_exeShells.results %}
                            {{ host }}, {{host_data.ansible_distribution}} {{host_data.ansible_distribution_version}}, Exe Shells, {{result.item.name}}, , , , {{result.cmd}} , {{result.changed}}, {{result.failed}}, {{result.stderr_lines | join(';')}}; {{result.stdout_lines | join(';')}}
                            {% endfor %}
                            {% endwith %}
                            {% endif %}
                            {% if hostvars[host].var_secuences is defined %}
                            {% with var_secuences=hostvars[host].var_secuences , host_data=hostvars[host] %} 
                            {%- for result in var_secuences.results %}
                            {{ host }}, {{host_data.ansible_distribution}} {{host_data.ansible_distribution_version}}, Secuences, {{result.item[0].name}}, , , , {{result.cmd}} , {{result.changed}}, {{result.failed}}, {{result.stderr_lines | join(';')}}; {{result.stdout_lines | join(';')}}
                            {% endfor %}
                            {% endwith %}
                            {% endif %}
                            {% endfor %}
